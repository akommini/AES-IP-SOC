<?xml version="1.0" encoding="UTF-8"?>
<!-- IMPORTANT: This is an internal file that has been generated
     by the Xilinx ISE software.  Any direct editing or
     changes made to this file may result in unpredictable
     behavior or data corruption.  It is strongly advised that
     users do not edit the contents of this file. -->
<messages>
<msg type="warning" file="HDLCompiler" num="466" delta="old" >"C:\Users\chinna\Desktop\AES algorigtms\SERPENT\vhdl\serpent_pkg.vhdl" Line 267: Ignoring unknown pragma value <arg fmt="%s" index="1">SBOX_LOOKUP_dw_op</arg>
</msg>

<msg type="warning" file="HDLCompiler" num="466" delta="old" >"C:\Users\chinna\Desktop\AES algorigtms\SERPENT\vhdl\serpent_pkg.vhdl" Line 301: Ignoring unknown pragma value <arg fmt="%s" index="1">LINEAR_TRANSFORM_dw_op</arg>
</msg>

<msg type="warning" file="HDLCompiler" num="466" delta="old" >"C:\Users\chinna\Desktop\AES algorigtms\SERPENT\vhdl\serpent_pkg.vhdl" Line 355: Ignoring unknown pragma value <arg fmt="%s" index="1">INVERSE_LINEAR_TRANSFORM_dw_op</arg>
</msg>

<msg type="warning" file="HDLCompiler" num="466" delta="old" >"C:\Users\chinna\Desktop\AES algorigtms\SERPENT\vhdl\serpent_pkg.vhdl" Line 416: Ignoring unknown pragma value <arg fmt="%s" index="1">SERPENT_ROUND_FUNCT_dw_op</arg>
</msg>

<msg type="warning" file="HDLCompiler" num="466" delta="old" >"C:\Users\chinna\Desktop\AES algorigtms\SERPENT\vhdl\serpent_pkg.vhdl" Line 535: Ignoring unknown pragma value <arg fmt="%s" index="1">UPDATE_W_ENCRYPT_dw_op</arg>
</msg>

<msg type="warning" file="HDLCompiler" num="466" delta="old" >"C:\Users\chinna\Desktop\AES algorigtms\SERPENT\vhdl\serpent_pkg.vhdl" Line 575: Ignoring unknown pragma value <arg fmt="%s" index="1">UPDATE_W_DECRYPT_dw_op</arg>
</msg>

<msg type="warning" file="HDLCompiler" num="466" delta="old" >"C:\Users\chinna\Desktop\AES algorigtms\SERPENT\vhdl\serpent_pkg.vhdl" Line 625: Ignoring unknown pragma value <arg fmt="%s" index="1">CREATE_ROUNDKEY_dw_op</arg>
</msg>

<msg type="warning" file="HDLCompiler" num="466" delta="old" >"C:\Users\chinna\Desktop\AES algorigtms\SERPENT\vhdl\serpent_pkg.vhdl" Line 723: Ignoring unknown pragma value <arg fmt="%s" index="1">INITIAL_EXPAND_FUNCT_dw_op</arg>
</msg>

<msg type="warning" file="HDLCompiler" num="466" delta="old" >"C:\Users\chinna\Desktop\AES algorigtms\SERPENT\vhdl\serpent_pkg.vhdl" Line 788: Ignoring unknown pragma value <arg fmt="%s" index="1">IP_FUNCT_dw_op</arg>
</msg>

<msg type="warning" file="HDLCompiler" num="466" delta="old" >"C:\Users\chinna\Desktop\AES algorigtms\SERPENT\vhdl\serpent_pkg.vhdl" Line 836: Ignoring unknown pragma value <arg fmt="%s" index="1">FP_FUNCT_dw_op</arg>
</msg>

<msg type="warning" file="HDLCompiler" num="871" delta="old" >"C:\Users\chinna\Desktop\Watermarking\complete_final_serpent\IP_Watermarking_serpent.vhd" Line 45: Using initial value <arg fmt="%s" index="1">&apos;0&apos;</arg> for <arg fmt="%s" index="2">enc_dec</arg> since it is never assigned
</msg>

<msg type="warning" file="HDLCompiler" num="1127" delta="old" >"C:\Users\chinna\Desktop\Watermarking\complete_final_serpent\WGC_Watermark.vhd" Line 38: Assignment to <arg fmt="%s" index="1">shift_reg</arg> ignored, since the identifier is never used
</msg>

<msg type="warning" file="HDLCompiler" num="92" delta="old" >"C:\Users\chinna\Desktop\Watermarking\complete_final_serpent\PSRG_watermark.vhd" Line 47: <arg fmt="%s" index="1">shift</arg> should be on the sensitivity list of the process
</msg>

<msg type="warning" file="HDLCompiler" num="92" delta="old" >"C:\Users\chinna\Desktop\Watermarking\complete_final_serpent\PSRG_watermark.vhd" Line 48: <arg fmt="%s" index="1">shift</arg> should be on the sensitivity list of the process
</msg>

<msg type="warning" file="HDLCompiler" num="92" delta="old" >"C:\Users\chinna\Desktop\Watermarking\complete_final_serpent\PSRG_watermark.vhd" Line 49: <arg fmt="%s" index="1">u1</arg> should be on the sensitivity list of the process
</msg>

<msg type="warning" file="HDLCompiler" num="92" delta="old" >"C:\Users\chinna\Desktop\AES algorigtms\SERPENT\vhdl\runup_roundkeys.vhdl" Line 91: <arg fmt="%s" index="1">ks_cv</arg> should be on the sensitivity list of the process
</msg>

<msg type="warning" file="HDLCompiler" num="92" delta="old" >"C:\Users\chinna\Desktop\Watermarking\complete_final_serpent\IP_Watermarking_serpent.vhd" Line 205: <arg fmt="%s" index="1">p</arg> should be on the sensitivity list of the process
</msg>

<msg type="warning" file="Xst" num="737" delta="old" >Found <arg fmt="%d" index="1">1</arg>-bit latch for signal &lt;<arg fmt="%s" index="2">output_dev&lt;35&gt;</arg>&gt;. Latches may be generated from incomplete case or if statements. We do not recommend the use of latches in FPGA/CPLD designs, as they may lead to timing problems.
</msg>

<msg type="warning" file="Xst" num="737" delta="old" >Found <arg fmt="%d" index="1">1</arg>-bit latch for signal &lt;<arg fmt="%s" index="2">output_dev&lt;34&gt;</arg>&gt;. Latches may be generated from incomplete case or if statements. We do not recommend the use of latches in FPGA/CPLD designs, as they may lead to timing problems.
</msg>

<msg type="warning" file="Xst" num="737" delta="old" >Found <arg fmt="%d" index="1">1</arg>-bit latch for signal &lt;<arg fmt="%s" index="2">output_dev&lt;33&gt;</arg>&gt;. Latches may be generated from incomplete case or if statements. We do not recommend the use of latches in FPGA/CPLD designs, as they may lead to timing problems.
</msg>

<msg type="warning" file="Xst" num="737" delta="old" >Found <arg fmt="%d" index="1">1</arg>-bit latch for signal &lt;<arg fmt="%s" index="2">output_dev&lt;32&gt;</arg>&gt;. Latches may be generated from incomplete case or if statements. We do not recommend the use of latches in FPGA/CPLD designs, as they may lead to timing problems.
</msg>

<msg type="warning" file="Xst" num="737" delta="old" >Found <arg fmt="%d" index="1">1</arg>-bit latch for signal &lt;<arg fmt="%s" index="2">output_dev&lt;31&gt;</arg>&gt;. Latches may be generated from incomplete case or if statements. We do not recommend the use of latches in FPGA/CPLD designs, as they may lead to timing problems.
</msg>

<msg type="warning" file="Xst" num="737" delta="old" >Found <arg fmt="%d" index="1">1</arg>-bit latch for signal &lt;<arg fmt="%s" index="2">output_dev&lt;30&gt;</arg>&gt;. Latches may be generated from incomplete case or if statements. We do not recommend the use of latches in FPGA/CPLD designs, as they may lead to timing problems.
</msg>

<msg type="warning" file="Xst" num="737" delta="old" >Found <arg fmt="%d" index="1">1</arg>-bit latch for signal &lt;<arg fmt="%s" index="2">output_dev&lt;29&gt;</arg>&gt;. Latches may be generated from incomplete case or if statements. We do not recommend the use of latches in FPGA/CPLD designs, as they may lead to timing problems.
</msg>

<msg type="warning" file="Xst" num="737" delta="old" >Found <arg fmt="%d" index="1">1</arg>-bit latch for signal &lt;<arg fmt="%s" index="2">output_dev&lt;28&gt;</arg>&gt;. Latches may be generated from incomplete case or if statements. We do not recommend the use of latches in FPGA/CPLD designs, as they may lead to timing problems.
</msg>

<msg type="warning" file="Xst" num="737" delta="old" >Found <arg fmt="%d" index="1">1</arg>-bit latch for signal &lt;<arg fmt="%s" index="2">output_dev&lt;27&gt;</arg>&gt;. Latches may be generated from incomplete case or if statements. We do not recommend the use of latches in FPGA/CPLD designs, as they may lead to timing problems.
</msg>

<msg type="warning" file="Xst" num="737" delta="old" >Found <arg fmt="%d" index="1">1</arg>-bit latch for signal &lt;<arg fmt="%s" index="2">output_dev&lt;26&gt;</arg>&gt;. Latches may be generated from incomplete case or if statements. We do not recommend the use of latches in FPGA/CPLD designs, as they may lead to timing problems.
</msg>

<msg type="warning" file="Xst" num="737" delta="old" >Found <arg fmt="%d" index="1">1</arg>-bit latch for signal &lt;<arg fmt="%s" index="2">output_dev&lt;25&gt;</arg>&gt;. Latches may be generated from incomplete case or if statements. We do not recommend the use of latches in FPGA/CPLD designs, as they may lead to timing problems.
</msg>

<msg type="warning" file="Xst" num="737" delta="old" >Found <arg fmt="%d" index="1">1</arg>-bit latch for signal &lt;<arg fmt="%s" index="2">output_dev&lt;24&gt;</arg>&gt;. Latches may be generated from incomplete case or if statements. We do not recommend the use of latches in FPGA/CPLD designs, as they may lead to timing problems.
</msg>

<msg type="warning" file="Xst" num="737" delta="old" >Found <arg fmt="%d" index="1">1</arg>-bit latch for signal &lt;<arg fmt="%s" index="2">output_dev&lt;23&gt;</arg>&gt;. Latches may be generated from incomplete case or if statements. We do not recommend the use of latches in FPGA/CPLD designs, as they may lead to timing problems.
</msg>

<msg type="warning" file="Xst" num="737" delta="old" >Found <arg fmt="%d" index="1">1</arg>-bit latch for signal &lt;<arg fmt="%s" index="2">output_dev&lt;22&gt;</arg>&gt;. Latches may be generated from incomplete case or if statements. We do not recommend the use of latches in FPGA/CPLD designs, as they may lead to timing problems.
</msg>

<msg type="warning" file="Xst" num="737" delta="old" >Found <arg fmt="%d" index="1">1</arg>-bit latch for signal &lt;<arg fmt="%s" index="2">output_dev&lt;21&gt;</arg>&gt;. Latches may be generated from incomplete case or if statements. We do not recommend the use of latches in FPGA/CPLD designs, as they may lead to timing problems.
</msg>

<msg type="warning" file="Xst" num="737" delta="old" >Found <arg fmt="%d" index="1">1</arg>-bit latch for signal &lt;<arg fmt="%s" index="2">output_dev&lt;20&gt;</arg>&gt;. Latches may be generated from incomplete case or if statements. We do not recommend the use of latches in FPGA/CPLD designs, as they may lead to timing problems.
</msg>

<msg type="warning" file="Xst" num="737" delta="old" >Found <arg fmt="%d" index="1">1</arg>-bit latch for signal &lt;<arg fmt="%s" index="2">output_dev&lt;19&gt;</arg>&gt;. Latches may be generated from incomplete case or if statements. We do not recommend the use of latches in FPGA/CPLD designs, as they may lead to timing problems.
</msg>

<msg type="warning" file="Xst" num="737" delta="old" >Found <arg fmt="%d" index="1">1</arg>-bit latch for signal &lt;<arg fmt="%s" index="2">output_dev&lt;18&gt;</arg>&gt;. Latches may be generated from incomplete case or if statements. We do not recommend the use of latches in FPGA/CPLD designs, as they may lead to timing problems.
</msg>

<msg type="warning" file="Xst" num="737" delta="old" >Found <arg fmt="%d" index="1">1</arg>-bit latch for signal &lt;<arg fmt="%s" index="2">output_dev&lt;17&gt;</arg>&gt;. Latches may be generated from incomplete case or if statements. We do not recommend the use of latches in FPGA/CPLD designs, as they may lead to timing problems.
</msg>

<msg type="warning" file="Xst" num="737" delta="old" >Found <arg fmt="%d" index="1">1</arg>-bit latch for signal &lt;<arg fmt="%s" index="2">output_dev&lt;16&gt;</arg>&gt;. Latches may be generated from incomplete case or if statements. We do not recommend the use of latches in FPGA/CPLD designs, as they may lead to timing problems.
</msg>

<msg type="warning" file="Xst" num="737" delta="old" >Found <arg fmt="%d" index="1">1</arg>-bit latch for signal &lt;<arg fmt="%s" index="2">output_dev&lt;15&gt;</arg>&gt;. Latches may be generated from incomplete case or if statements. We do not recommend the use of latches in FPGA/CPLD designs, as they may lead to timing problems.
</msg>

<msg type="warning" file="Xst" num="737" delta="old" >Found <arg fmt="%d" index="1">1</arg>-bit latch for signal &lt;<arg fmt="%s" index="2">output_dev&lt;14&gt;</arg>&gt;. Latches may be generated from incomplete case or if statements. We do not recommend the use of latches in FPGA/CPLD designs, as they may lead to timing problems.
</msg>

<msg type="warning" file="Xst" num="737" delta="old" >Found <arg fmt="%d" index="1">1</arg>-bit latch for signal &lt;<arg fmt="%s" index="2">output_dev&lt;13&gt;</arg>&gt;. Latches may be generated from incomplete case or if statements. We do not recommend the use of latches in FPGA/CPLD designs, as they may lead to timing problems.
</msg>

<msg type="warning" file="Xst" num="737" delta="old" >Found <arg fmt="%d" index="1">1</arg>-bit latch for signal &lt;<arg fmt="%s" index="2">output_dev&lt;12&gt;</arg>&gt;. Latches may be generated from incomplete case or if statements. We do not recommend the use of latches in FPGA/CPLD designs, as they may lead to timing problems.
</msg>

<msg type="warning" file="Xst" num="737" delta="old" >Found <arg fmt="%d" index="1">1</arg>-bit latch for signal &lt;<arg fmt="%s" index="2">output_dev&lt;11&gt;</arg>&gt;. Latches may be generated from incomplete case or if statements. We do not recommend the use of latches in FPGA/CPLD designs, as they may lead to timing problems.
</msg>

<msg type="warning" file="Xst" num="737" delta="old" >Found <arg fmt="%d" index="1">1</arg>-bit latch for signal &lt;<arg fmt="%s" index="2">output_dev&lt;10&gt;</arg>&gt;. Latches may be generated from incomplete case or if statements. We do not recommend the use of latches in FPGA/CPLD designs, as they may lead to timing problems.
</msg>

<msg type="warning" file="Xst" num="737" delta="old" >Found <arg fmt="%d" index="1">1</arg>-bit latch for signal &lt;<arg fmt="%s" index="2">output_dev&lt;9&gt;</arg>&gt;. Latches may be generated from incomplete case or if statements. We do not recommend the use of latches in FPGA/CPLD designs, as they may lead to timing problems.
</msg>

<msg type="warning" file="Xst" num="737" delta="old" >Found <arg fmt="%d" index="1">1</arg>-bit latch for signal &lt;<arg fmt="%s" index="2">output_dev&lt;8&gt;</arg>&gt;. Latches may be generated from incomplete case or if statements. We do not recommend the use of latches in FPGA/CPLD designs, as they may lead to timing problems.
</msg>

<msg type="warning" file="Xst" num="737" delta="old" >Found <arg fmt="%d" index="1">1</arg>-bit latch for signal &lt;<arg fmt="%s" index="2">output_dev&lt;7&gt;</arg>&gt;. Latches may be generated from incomplete case or if statements. We do not recommend the use of latches in FPGA/CPLD designs, as they may lead to timing problems.
</msg>

<msg type="warning" file="Xst" num="737" delta="old" >Found <arg fmt="%d" index="1">1</arg>-bit latch for signal &lt;<arg fmt="%s" index="2">output_dev&lt;6&gt;</arg>&gt;. Latches may be generated from incomplete case or if statements. We do not recommend the use of latches in FPGA/CPLD designs, as they may lead to timing problems.
</msg>

<msg type="warning" file="Xst" num="737" delta="old" >Found <arg fmt="%d" index="1">1</arg>-bit latch for signal &lt;<arg fmt="%s" index="2">output_dev&lt;5&gt;</arg>&gt;. Latches may be generated from incomplete case or if statements. We do not recommend the use of latches in FPGA/CPLD designs, as they may lead to timing problems.
</msg>

<msg type="warning" file="Xst" num="737" delta="old" >Found <arg fmt="%d" index="1">1</arg>-bit latch for signal &lt;<arg fmt="%s" index="2">output_dev&lt;4&gt;</arg>&gt;. Latches may be generated from incomplete case or if statements. We do not recommend the use of latches in FPGA/CPLD designs, as they may lead to timing problems.
</msg>

<msg type="warning" file="Xst" num="737" delta="old" >Found <arg fmt="%d" index="1">1</arg>-bit latch for signal &lt;<arg fmt="%s" index="2">output_dev&lt;3&gt;</arg>&gt;. Latches may be generated from incomplete case or if statements. We do not recommend the use of latches in FPGA/CPLD designs, as they may lead to timing problems.
</msg>

<msg type="warning" file="Xst" num="737" delta="old" >Found <arg fmt="%d" index="1">1</arg>-bit latch for signal &lt;<arg fmt="%s" index="2">output_dev&lt;2&gt;</arg>&gt;. Latches may be generated from incomplete case or if statements. We do not recommend the use of latches in FPGA/CPLD designs, as they may lead to timing problems.
</msg>

<msg type="warning" file="Xst" num="737" delta="old" >Found <arg fmt="%d" index="1">1</arg>-bit latch for signal &lt;<arg fmt="%s" index="2">output_dev&lt;1&gt;</arg>&gt;. Latches may be generated from incomplete case or if statements. We do not recommend the use of latches in FPGA/CPLD designs, as they may lead to timing problems.
</msg>

<msg type="warning" file="Xst" num="737" delta="old" >Found <arg fmt="%d" index="1">1</arg>-bit latch for signal &lt;<arg fmt="%s" index="2">output_dev&lt;0&gt;</arg>&gt;. Latches may be generated from incomplete case or if statements. We do not recommend the use of latches in FPGA/CPLD designs, as they may lead to timing problems.
</msg>

<msg type="warning" file="Xst" num="2404" delta="old" > FFs/Latches &lt;<arg fmt="%s" index="1">CTRL_ENC_DEC_B</arg>&lt;<arg fmt="%d" index="2">0</arg>:<arg fmt="%d" index="3">0</arg>&gt;&gt; (without init value) have a constant value of <arg fmt="%c" index="4">0</arg> in block &lt;<arg fmt="%s" index="5">INTERFACE</arg>&gt;.
</msg>

<msg type="info" file="Xst" num="2261" delta="old" >The FF/Latch &lt;<arg fmt="%s" index="1">CV_INT_255</arg>&gt; in Unit &lt;<arg fmt="%s" index="2">INTER</arg>&gt; is equivalent to the following <arg fmt="%s" index="3">254 FFs/Latches</arg>, which will be removed : <arg fmt="%s" index="4">&lt;CV_INT_254&gt; &lt;CV_INT_253&gt; &lt;CV_INT_252&gt; &lt;CV_INT_251&gt; &lt;CV_INT_250&gt; &lt;CV_INT_249&gt; &lt;CV_INT_248&gt; &lt;CV_INT_247&gt; &lt;CV_INT_246&gt; &lt;CV_INT_245&gt; &lt;CV_INT_244&gt; &lt;CV_INT_243&gt; &lt;CV_INT_242&gt; &lt;CV_INT_241&gt; &lt;CV_INT_240&gt; &lt;CV_INT_239&gt; &lt;CV_INT_238&gt; &lt;CV_INT_237&gt; &lt;CV_INT_236&gt; &lt;CV_INT_235&gt; &lt;CV_INT_234&gt; &lt;CV_INT_233&gt; &lt;CV_INT_232&gt; &lt;CV_INT_231&gt; &lt;CV_INT_230&gt; &lt;CV_INT_229&gt; &lt;CV_INT_228&gt; &lt;CV_INT_227&gt; &lt;CV_INT_226&gt; &lt;CV_INT_225&gt; &lt;CV_INT_224&gt; &lt;CV_INT_223&gt; &lt;CV_INT_222&gt; &lt;CV_INT_221&gt; &lt;CV_INT_220&gt; &lt;CV_INT_219&gt; &lt;CV_INT_218&gt; &lt;CV_INT_217&gt; &lt;CV_INT_216&gt; &lt;CV_INT_215&gt; &lt;CV_INT_214&gt; &lt;CV_INT_213&gt; &lt;CV_INT_212&gt; &lt;CV_INT_211&gt; &lt;CV_INT_210&gt; &lt;CV_INT_209&gt; &lt;CV_INT_208&gt; &lt;CV_INT_207&gt; &lt;CV_INT_206&gt; &lt;CV_INT_205&gt; &lt;CV_INT_204&gt; &lt;CV_INT_203&gt; &lt;CV_INT_202&gt; &lt;CV_INT_201&gt; &lt;CV_INT_200&gt; &lt;CV_INT_199&gt; &lt;CV_INT_198&gt; &lt;CV_INT_197&gt; &lt;CV_INT_196&gt; &lt;CV_INT_195&gt; &lt;CV_INT_194&gt; &lt;CV_INT_193&gt; &lt;CV_INT_192&gt; &lt;CV_INT_191&gt; &lt;CV_INT_190&gt; &lt;CV_INT_189&gt; &lt;CV_INT_188&gt; &lt;CV_INT_187&gt; &lt;CV_INT_186&gt; &lt;CV_INT_185&gt; &lt;CV_INT_184&gt; &lt;CV_INT_183&gt; &lt;CV_INT_182&gt; &lt;CV_INT_181&gt; &lt;CV_INT_180&gt; &lt;CV_INT_179&gt; &lt;CV_INT_178&gt; &lt;CV_INT_177&gt; &lt;CV_INT_176&gt; &lt;CV_INT_175&gt; &lt;CV_INT_174&gt; &lt;CV_INT_173&gt; &lt;CV_INT_172&gt; &lt;CV_INT_171&gt; &lt;CV_INT_170&gt; &lt;CV_INT_169&gt; &lt;CV_INT_168&gt; &lt;CV_INT_167&gt; &lt;CV_INT_166&gt; &lt;CV_INT_165&gt; &lt;CV_INT_164&gt; &lt;CV_INT_163&gt; &lt;CV_INT_162&gt; &lt;CV_INT_161&gt; &lt;CV_INT_160&gt; &lt;CV_INT_159&gt; &lt;CV_INT_158&gt; &lt;CV_INT_157&gt; &lt;CV_INT_156&gt; &lt;CV_INT_155&gt; &lt;CV_INT_154&gt; &lt;CV_INT_153&gt; &lt;CV_INT_152&gt; &lt;CV_INT_151&gt; &lt;CV_INT_150&gt; &lt;CV_INT_149&gt; &lt;CV_INT_148&gt; &lt;CV_INT_147&gt; &lt;CV_INT_146&gt; &lt;CV_INT_145&gt; &lt;CV_INT_144&gt; &lt;CV_INT_143&gt; &lt;CV_INT_142&gt; &lt;CV_INT_141&gt; &lt;CV_INT_140&gt; &lt;CV_INT_139&gt; &lt;CV_INT_138&gt; &lt;CV_INT_137&gt; &lt;CV_INT_136&gt; &lt;CV_INT_135&gt; &lt;CV_INT_134&gt; &lt;CV_INT_133&gt; &lt;CV_INT_132&gt; &lt;CV_INT_131&gt; &lt;CV_INT_130&gt; &lt;CV_INT_129&gt; &lt;CV_INT_128&gt; &lt;CV_INT_126&gt; &lt;CV_INT_125&gt; &lt;CV_INT_124&gt; &lt;CV_INT_123&gt; &lt;CV_INT_122&gt; &lt;CV_INT_121&gt; &lt;CV_INT_120&gt; &lt;CV_INT_119&gt; &lt;CV_INT_118&gt; &lt;CV_INT_117&gt; &lt;CV_INT_116&gt; &lt;CV_INT_115&gt; &lt;CV_INT_114&gt; &lt;CV_INT_113&gt; &lt;CV_INT_112&gt; &lt;CV_INT_111&gt; &lt;CV_INT_110&gt; &lt;CV_INT_109&gt; &lt;CV_INT_108&gt; &lt;CV_INT_107&gt; &lt;CV_INT_106&gt; &lt;CV_INT_105&gt; &lt;CV_INT_104&gt; &lt;CV_INT_103&gt; &lt;CV_INT_102&gt; &lt;CV_INT_101&gt; &lt;CV_INT_100&gt; &lt;CV_INT_99&gt; &lt;CV_INT_98&gt; &lt;CV_INT_97&gt; &lt;CV_INT_96&gt; &lt;CV_INT_95&gt; &lt;CV_INT_94&gt; &lt;CV_INT_93&gt; &lt;CV_INT_92&gt; &lt;CV_INT_91&gt; &lt;CV_INT_90&gt; &lt;CV_INT_89&gt; &lt;CV_INT_88&gt; &lt;CV_INT_87&gt; &lt;CV_INT_86&gt; &lt;CV_INT_85&gt; &lt;CV_INT_84&gt; &lt;CV_INT_83&gt; &lt;CV_INT_82&gt; &lt;CV_INT_81&gt; &lt;CV_INT_80&gt; &lt;CV_INT_79&gt; &lt;CV_INT_78&gt; &lt;CV_INT_77&gt; &lt;CV_INT_76&gt; &lt;CV_INT_75&gt; &lt;CV_INT_74&gt; &lt;CV_INT_73&gt; &lt;CV_INT_72&gt; &lt;CV_INT_71&gt; &lt;CV_INT_70&gt; &lt;CV_INT_69&gt; &lt;CV_INT_68&gt; &lt;CV_INT_67&gt; &lt;CV_INT_66&gt; &lt;CV_INT_65&gt; &lt;CV_INT_64&gt; &lt;CV_INT_63&gt; &lt;CV_INT_62&gt; &lt;CV_INT_61&gt; &lt;CV_INT_60&gt; &lt;CV_INT_59&gt; &lt;CV_INT_58&gt; &lt;CV_INT_57&gt; &lt;CV_INT_56&gt; &lt;CV_INT_55&gt; &lt;CV_INT_54&gt; &lt;CV_INT_53&gt; &lt;CV_INT_52&gt; &lt;CV_INT_51&gt; &lt;CV_INT_50&gt; &lt;CV_INT_49&gt; &lt;CV_INT_48&gt; &lt;CV_INT_47&gt; &lt;CV_INT_46&gt; &lt;CV_INT_45&gt; &lt;CV_INT_44&gt; &lt;CV_INT_43&gt; &lt;CV_INT_42&gt; &lt;CV_INT_41&gt; &lt;CV_INT_40&gt; &lt;CV_INT_39&gt; &lt;CV_INT_38&gt; &lt;CV_INT_37&gt; &lt;CV_INT_36&gt; &lt;CV_INT_35&gt; &lt;CV_INT_34&gt; &lt;CV_INT_33&gt; &lt;CV_INT_32&gt; &lt;CV_INT_31&gt; &lt;CV_INT_30&gt; &lt;CV_INT_29&gt; &lt;CV_INT_28&gt; &lt;CV_INT_27&gt; &lt;CV_INT_26&gt; &lt;CV_INT_25&gt; &lt;CV_INT_24&gt; &lt;CV_INT_23&gt; &lt;CV_INT_22&gt; &lt;CV_INT_21&gt; &lt;CV_INT_20&gt; &lt;CV_INT_19&gt; &lt;CV_INT_18&gt; &lt;CV_INT_17&gt; &lt;CV_INT_16&gt; &lt;CV_INT_15&gt; &lt;CV_INT_14&gt; &lt;CV_INT_13&gt; &lt;CV_INT_12&gt; &lt;CV_INT_11&gt; &lt;CV_INT_10&gt; &lt;CV_INT_9&gt; &lt;CV_INT_8&gt; &lt;CV_INT_7&gt; &lt;CV_INT_6&gt; &lt;CV_INT_5&gt; &lt;CV_INT_4&gt; &lt;CV_INT_3&gt; &lt;CV_INT_2&gt; &lt;CV_INT_1&gt; &lt;CV_INT_0&gt; </arg>
</msg>

<msg type="warning" file="Xst" num="1710" delta="old" >FF/Latch &lt;<arg fmt="%s" index="1">CV_INT_255</arg>&gt; (without init value) has a constant value of <arg fmt="%d" index="2">0</arg> in block &lt;<arg fmt="%s" index="3">INTER</arg>&gt;. This FF/Latch will be trimmed during the optimization process.
</msg>

<msg type="info" file="Xst" num="3218" delta="old" >HDL ADVISOR - The RAM &lt;<arg fmt="%s" index="1">Mram__n0375</arg>&gt; will be implemented on LUTs either because you have described an asynchronous read or because of currently unsupported block RAM features. If you have described an asynchronous read, making it synchronous would allow you to take advantage of available block RAM resources, for optimized device usage and improved timings. Please refer to your documentation for coding guidelines.
</msg>

<msg type="info" file="Xst" num="2261" delta="old" >The FF/Latch &lt;<arg fmt="%s" index="1">CV_INT_62</arg>&gt; in Unit &lt;<arg fmt="%s" index="2">INTERFACE</arg>&gt; is equivalent to the following <arg fmt="%s" index="3">62 FFs/Latches</arg>, which will be removed : <arg fmt="%s" index="4">&lt;CV_INT_61&gt; &lt;CV_INT_60&gt; &lt;CV_INT_59&gt; &lt;CV_INT_58&gt; &lt;CV_INT_57&gt; &lt;CV_INT_56&gt; &lt;CV_INT_55&gt; &lt;CV_INT_54&gt; &lt;CV_INT_53&gt; &lt;CV_INT_52&gt; &lt;CV_INT_51&gt; &lt;CV_INT_50&gt; &lt;CV_INT_49&gt; &lt;CV_INT_48&gt; &lt;CV_INT_47&gt; &lt;CV_INT_46&gt; &lt;CV_INT_45&gt; &lt;CV_INT_44&gt; &lt;CV_INT_43&gt; &lt;CV_INT_42&gt; &lt;CV_INT_41&gt; &lt;CV_INT_40&gt; &lt;CV_INT_39&gt; &lt;CV_INT_38&gt; &lt;CV_INT_37&gt; &lt;CV_INT_36&gt; &lt;CV_INT_35&gt; &lt;CV_INT_34&gt; &lt;CV_INT_33&gt; &lt;CV_INT_32&gt; &lt;CV_INT_31&gt; &lt;CV_INT_30&gt; &lt;CV_INT_29&gt; &lt;CV_INT_28&gt; &lt;CV_INT_27&gt; &lt;CV_INT_26&gt; &lt;CV_INT_25&gt; &lt;CV_INT_24&gt; &lt;CV_INT_23&gt; &lt;CV_INT_22&gt; &lt;CV_INT_21&gt; &lt;CV_INT_20&gt; &lt;CV_INT_19&gt; &lt;CV_INT_18&gt; &lt;CV_INT_17&gt; &lt;CV_INT_16&gt; &lt;CV_INT_15&gt; &lt;CV_INT_14&gt; &lt;CV_INT_13&gt; &lt;CV_INT_12&gt; &lt;CV_INT_11&gt; &lt;CV_INT_10&gt; &lt;CV_INT_9&gt; &lt;CV_INT_8&gt; &lt;CV_INT_7&gt; &lt;CV_INT_6&gt; &lt;CV_INT_5&gt; &lt;CV_INT_4&gt; &lt;CV_INT_3&gt; &lt;CV_INT_2&gt; &lt;CV_INT_1&gt; &lt;CV_INT_0&gt; </arg>
</msg>

<msg type="info" file="Xst" num="2261" delta="old" >The FF/Latch &lt;<arg fmt="%s" index="1">CV_INT_254</arg>&gt; in Unit &lt;<arg fmt="%s" index="2">INTERFACE</arg>&gt; is equivalent to the following <arg fmt="%s" index="3">69 FFs/Latches</arg>, which will be removed : <arg fmt="%s" index="4">&lt;CV_INT_252&gt; &lt;CV_INT_251&gt; &lt;CV_INT_250&gt; &lt;CV_INT_248&gt; &lt;CV_INT_245&gt; &lt;CV_INT_243&gt; &lt;CV_INT_241&gt; &lt;CV_INT_236&gt; &lt;CV_INT_235&gt; &lt;CV_INT_232&gt; &lt;CV_INT_230&gt; &lt;CV_INT_227&gt; &lt;CV_INT_226&gt; &lt;CV_INT_220&gt; &lt;CV_INT_219&gt; &lt;CV_INT_216&gt; &lt;CV_INT_214&gt; &lt;CV_INT_212&gt; &lt;CV_INT_211&gt; &lt;CV_INT_210&gt; &lt;CV_INT_208&gt; &lt;CV_INT_205&gt; &lt;CV_INT_203&gt; &lt;CV_INT_201&gt; &lt;CV_INT_196&gt; &lt;CV_INT_195&gt; &lt;CV_INT_192&gt; &lt;CV_INT_190&gt; &lt;CV_INT_188&gt; &lt;CV_INT_187&gt; &lt;CV_INT_186&gt; &lt;CV_INT_184&gt; &lt;CV_INT_181&gt; &lt;CV_INT_180&gt; &lt;CV_INT_179&gt; &lt;CV_INT_177&gt; &lt;CV_INT_176&gt; &lt;CV_INT_174&gt; &lt;CV_INT_173&gt; &lt;CV_INT_172&gt; &lt;CV_INT_171&gt; &lt;CV_INT_170&gt; &lt;CV_INT_169&gt; &lt;CV_INT_168&gt; &lt;CV_INT_166&gt; &lt;CV_INT_165&gt; &lt;CV_INT_163&gt; &lt;CV_INT_162&gt; &lt;CV_INT_161&gt; &lt;CV_INT_156&gt; &lt;CV_INT_155&gt; &lt;CV_INT_152&gt; &lt;CV_INT_150&gt; &lt;CV_INT_148&gt; &lt;CV_INT_147&gt; &lt;CV_INT_146&gt; &lt;CV_INT_144&gt; &lt;CV_INT_141&gt; &lt;CV_INT_140&gt; &lt;CV_INT_139&gt; &lt;CV_INT_137&gt; &lt;CV_INT_136&gt; &lt;CV_INT_134&gt; &lt;CV_INT_133&gt; &lt;CV_INT_132&gt; &lt;CV_INT_131&gt; &lt;CV_INT_130&gt; &lt;CV_INT_129&gt; &lt;CV_INT_128&gt; </arg>
</msg>

<msg type="info" file="Xst" num="2261" delta="old" >The FF/Latch &lt;<arg fmt="%s" index="1">CV_INT_126</arg>&gt; in Unit &lt;<arg fmt="%s" index="2">INTERFACE</arg>&gt; is equivalent to the following <arg fmt="%s" index="3">62 FFs/Latches</arg>, which will be removed : <arg fmt="%s" index="4">&lt;CV_INT_125&gt; &lt;CV_INT_124&gt; &lt;CV_INT_123&gt; &lt;CV_INT_122&gt; &lt;CV_INT_121&gt; &lt;CV_INT_120&gt; &lt;CV_INT_119&gt; &lt;CV_INT_118&gt; &lt;CV_INT_117&gt; &lt;CV_INT_116&gt; &lt;CV_INT_115&gt; &lt;CV_INT_114&gt; &lt;CV_INT_113&gt; &lt;CV_INT_112&gt; &lt;CV_INT_111&gt; &lt;CV_INT_110&gt; &lt;CV_INT_109&gt; &lt;CV_INT_108&gt; &lt;CV_INT_107&gt; &lt;CV_INT_106&gt; &lt;CV_INT_105&gt; &lt;CV_INT_104&gt; &lt;CV_INT_103&gt; &lt;CV_INT_102&gt; &lt;CV_INT_101&gt; &lt;CV_INT_100&gt; &lt;CV_INT_99&gt; &lt;CV_INT_98&gt; &lt;CV_INT_97&gt; &lt;CV_INT_96&gt; &lt;CV_INT_95&gt; &lt;CV_INT_94&gt; &lt;CV_INT_93&gt; &lt;CV_INT_92&gt; &lt;CV_INT_91&gt; &lt;CV_INT_90&gt; &lt;CV_INT_89&gt; &lt;CV_INT_88&gt; &lt;CV_INT_87&gt; &lt;CV_INT_86&gt; &lt;CV_INT_85&gt; &lt;CV_INT_84&gt; &lt;CV_INT_83&gt; &lt;CV_INT_82&gt; &lt;CV_INT_81&gt; &lt;CV_INT_80&gt; &lt;CV_INT_79&gt; &lt;CV_INT_78&gt; &lt;CV_INT_77&gt; &lt;CV_INT_76&gt; &lt;CV_INT_75&gt; &lt;CV_INT_74&gt; &lt;CV_INT_73&gt; &lt;CV_INT_72&gt; &lt;CV_INT_71&gt; &lt;CV_INT_70&gt; &lt;CV_INT_69&gt; &lt;CV_INT_68&gt; &lt;CV_INT_67&gt; &lt;CV_INT_66&gt; &lt;CV_INT_65&gt; &lt;CV_INT_64&gt; </arg>
</msg>

<msg type="info" file="Xst" num="2261" delta="old" >The FF/Latch &lt;<arg fmt="%s" index="1">CTRL_DATA_LOAD</arg>&gt; in Unit &lt;<arg fmt="%s" index="2">INTERFACE</arg>&gt; is equivalent to the following <arg fmt="%s" index="3">FF/Latch</arg>, which will be removed : <arg fmt="%s" index="4">&lt;KS_CVLOAD&gt; </arg>
</msg>

<msg type="info" file="Xst" num="2261" delta="old" >The FF/Latch &lt;<arg fmt="%s" index="1">CV_INT_244</arg>&gt; in Unit &lt;<arg fmt="%s" index="2">INTERFACE</arg>&gt; is equivalent to the following <arg fmt="%s" index="3">35 FFs/Latches</arg>, which will be removed : <arg fmt="%s" index="4">&lt;CV_INT_240&gt; &lt;CV_INT_238&gt; &lt;CV_INT_237&gt; &lt;CV_INT_234&gt; &lt;CV_INT_233&gt; &lt;CV_INT_229&gt; &lt;CV_INT_225&gt; &lt;CV_INT_204&gt; &lt;CV_INT_200&gt; &lt;CV_INT_198&gt; &lt;CV_INT_197&gt; &lt;CV_INT_194&gt; &lt;CV_INT_193&gt; &lt;CV_INT_191&gt; &lt;CV_INT_189&gt; &lt;CV_INT_185&gt; &lt;CV_INT_183&gt; &lt;CV_INT_182&gt; &lt;CV_INT_178&gt; &lt;CV_INT_175&gt; &lt;CV_INT_167&gt; &lt;CV_INT_164&gt; &lt;CV_INT_160&gt; &lt;CV_INT_159&gt; &lt;CV_INT_158&gt; &lt;CV_INT_157&gt; &lt;CV_INT_154&gt; &lt;CV_INT_153&gt; &lt;CV_INT_151&gt; &lt;CV_INT_149&gt; &lt;CV_INT_145&gt; &lt;CV_INT_143&gt; &lt;CV_INT_142&gt; &lt;CV_INT_138&gt; &lt;CV_INT_135&gt; </arg>
</msg>

<msg type="warning" file="Xst" num="1710" delta="old" >FF/Latch &lt;<arg fmt="%s" index="1">CV_INT_62</arg>&gt; (without init value) has a constant value of <arg fmt="%d" index="2">0</arg> in block &lt;<arg fmt="%s" index="3">INTERFACE</arg>&gt;. This FF/Latch will be trimmed during the optimization process.
</msg>

<msg type="warning" file="Xst" num="1895" delta="old" >Due to other FF/Latch trimming, FF/Latch &lt;<arg fmt="%s" index="1">CV_INT_63</arg>&gt; (without init value) has a constant value of <arg fmt="%d" index="2">0</arg> in block &lt;<arg fmt="%s" index="3">INTERFACE</arg>&gt;. This FF/Latch will be trimmed during the optimization process.
</msg>

<msg type="warning" file="Xst" num="1895" delta="old" >Due to other FF/Latch trimming, FF/Latch &lt;<arg fmt="%s" index="1">CV_INT_126</arg>&gt; (without init value) has a constant value of <arg fmt="%d" index="2">0</arg> in block &lt;<arg fmt="%s" index="3">INTERFACE</arg>&gt;. This FF/Latch will be trimmed during the optimization process.
</msg>

<msg type="warning" file="Xst" num="1895" delta="old" >Due to other FF/Latch trimming, FF/Latch &lt;<arg fmt="%s" index="1">CV_INT_199</arg>&gt; (without init value) has a constant value of <arg fmt="%d" index="2">0</arg> in block &lt;<arg fmt="%s" index="3">INTERFACE</arg>&gt;. This FF/Latch will be trimmed during the optimization process.
</msg>

<msg type="warning" file="Xst" num="1895" delta="old" >Due to other FF/Latch trimming, FF/Latch &lt;<arg fmt="%s" index="1">CV_INT_202</arg>&gt; (without init value) has a constant value of <arg fmt="%d" index="2">0</arg> in block &lt;<arg fmt="%s" index="3">INTERFACE</arg>&gt;. This FF/Latch will be trimmed during the optimization process.
</msg>

<msg type="warning" file="Xst" num="1895" delta="old" >Due to other FF/Latch trimming, FF/Latch &lt;<arg fmt="%s" index="1">CV_INT_206</arg>&gt; (without init value) has a constant value of <arg fmt="%d" index="2">0</arg> in block &lt;<arg fmt="%s" index="3">INTERFACE</arg>&gt;. This FF/Latch will be trimmed during the optimization process.
</msg>

<msg type="warning" file="Xst" num="1895" delta="old" >Due to other FF/Latch trimming, FF/Latch &lt;<arg fmt="%s" index="1">CV_INT_207</arg>&gt; (without init value) has a constant value of <arg fmt="%d" index="2">0</arg> in block &lt;<arg fmt="%s" index="3">INTERFACE</arg>&gt;. This FF/Latch will be trimmed during the optimization process.
</msg>

<msg type="warning" file="Xst" num="1895" delta="old" >Due to other FF/Latch trimming, FF/Latch &lt;<arg fmt="%s" index="1">CV_INT_209</arg>&gt; (without init value) has a constant value of <arg fmt="%d" index="2">0</arg> in block &lt;<arg fmt="%s" index="3">INTERFACE</arg>&gt;. This FF/Latch will be trimmed during the optimization process.
</msg>

<msg type="warning" file="Xst" num="1895" delta="old" >Due to other FF/Latch trimming, FF/Latch &lt;<arg fmt="%s" index="1">CV_INT_213</arg>&gt; (without init value) has a constant value of <arg fmt="%d" index="2">0</arg> in block &lt;<arg fmt="%s" index="3">INTERFACE</arg>&gt;. This FF/Latch will be trimmed during the optimization process.
</msg>

<msg type="warning" file="Xst" num="1895" delta="old" >Due to other FF/Latch trimming, FF/Latch &lt;<arg fmt="%s" index="1">CV_INT_215</arg>&gt; (without init value) has a constant value of <arg fmt="%d" index="2">0</arg> in block &lt;<arg fmt="%s" index="3">INTERFACE</arg>&gt;. This FF/Latch will be trimmed during the optimization process.
</msg>

<msg type="warning" file="Xst" num="1895" delta="old" >Due to other FF/Latch trimming, FF/Latch &lt;<arg fmt="%s" index="1">CV_INT_217</arg>&gt; (without init value) has a constant value of <arg fmt="%d" index="2">0</arg> in block &lt;<arg fmt="%s" index="3">INTERFACE</arg>&gt;. This FF/Latch will be trimmed during the optimization process.
</msg>

<msg type="warning" file="Xst" num="1895" delta="old" >Due to other FF/Latch trimming, FF/Latch &lt;<arg fmt="%s" index="1">CV_INT_218</arg>&gt; (without init value) has a constant value of <arg fmt="%d" index="2">0</arg> in block &lt;<arg fmt="%s" index="3">INTERFACE</arg>&gt;. This FF/Latch will be trimmed during the optimization process.
</msg>

<msg type="warning" file="Xst" num="1895" delta="old" >Due to other FF/Latch trimming, FF/Latch &lt;<arg fmt="%s" index="1">CV_INT_221</arg>&gt; (without init value) has a constant value of <arg fmt="%d" index="2">0</arg> in block &lt;<arg fmt="%s" index="3">INTERFACE</arg>&gt;. This FF/Latch will be trimmed during the optimization process.
</msg>

<msg type="warning" file="Xst" num="1895" delta="old" >Due to other FF/Latch trimming, FF/Latch &lt;<arg fmt="%s" index="1">CV_INT_222</arg>&gt; (without init value) has a constant value of <arg fmt="%d" index="2">0</arg> in block &lt;<arg fmt="%s" index="3">INTERFACE</arg>&gt;. This FF/Latch will be trimmed during the optimization process.
</msg>

<msg type="warning" file="Xst" num="1895" delta="old" >Due to other FF/Latch trimming, FF/Latch &lt;<arg fmt="%s" index="1">CV_INT_223</arg>&gt; (without init value) has a constant value of <arg fmt="%d" index="2">0</arg> in block &lt;<arg fmt="%s" index="3">INTERFACE</arg>&gt;. This FF/Latch will be trimmed during the optimization process.
</msg>

<msg type="warning" file="Xst" num="1895" delta="old" >Due to other FF/Latch trimming, FF/Latch &lt;<arg fmt="%s" index="1">CV_INT_224</arg>&gt; (without init value) has a constant value of <arg fmt="%d" index="2">0</arg> in block &lt;<arg fmt="%s" index="3">INTERFACE</arg>&gt;. This FF/Latch will be trimmed during the optimization process.
</msg>

<msg type="warning" file="Xst" num="1895" delta="old" >Due to other FF/Latch trimming, FF/Latch &lt;<arg fmt="%s" index="1">CV_INT_228</arg>&gt; (without init value) has a constant value of <arg fmt="%d" index="2">0</arg> in block &lt;<arg fmt="%s" index="3">INTERFACE</arg>&gt;. This FF/Latch will be trimmed during the optimization process.
</msg>

<msg type="warning" file="Xst" num="1895" delta="old" >Due to other FF/Latch trimming, FF/Latch &lt;<arg fmt="%s" index="1">CV_INT_231</arg>&gt; (without init value) has a constant value of <arg fmt="%d" index="2">0</arg> in block &lt;<arg fmt="%s" index="3">INTERFACE</arg>&gt;. This FF/Latch will be trimmed during the optimization process.
</msg>

<msg type="warning" file="Xst" num="1895" delta="old" >Due to other FF/Latch trimming, FF/Latch &lt;<arg fmt="%s" index="1">CV_INT_239</arg>&gt; (without init value) has a constant value of <arg fmt="%d" index="2">0</arg> in block &lt;<arg fmt="%s" index="3">INTERFACE</arg>&gt;. This FF/Latch will be trimmed during the optimization process.
</msg>

<msg type="warning" file="Xst" num="1895" delta="old" >Due to other FF/Latch trimming, FF/Latch &lt;<arg fmt="%s" index="1">CV_INT_242</arg>&gt; (without init value) has a constant value of <arg fmt="%d" index="2">0</arg> in block &lt;<arg fmt="%s" index="3">INTERFACE</arg>&gt;. This FF/Latch will be trimmed during the optimization process.
</msg>

<msg type="warning" file="Xst" num="1895" delta="old" >Due to other FF/Latch trimming, FF/Latch &lt;<arg fmt="%s" index="1">CV_INT_244</arg>&gt; (without init value) has a constant value of <arg fmt="%d" index="2">0</arg> in block &lt;<arg fmt="%s" index="3">INTERFACE</arg>&gt;. This FF/Latch will be trimmed during the optimization process.
</msg>

<msg type="warning" file="Xst" num="1895" delta="old" >Due to other FF/Latch trimming, FF/Latch &lt;<arg fmt="%s" index="1">CV_INT_246</arg>&gt; (without init value) has a constant value of <arg fmt="%d" index="2">0</arg> in block &lt;<arg fmt="%s" index="3">INTERFACE</arg>&gt;. This FF/Latch will be trimmed during the optimization process.
</msg>

<msg type="warning" file="Xst" num="1895" delta="old" >Due to other FF/Latch trimming, FF/Latch &lt;<arg fmt="%s" index="1">CV_INT_247</arg>&gt; (without init value) has a constant value of <arg fmt="%d" index="2">0</arg> in block &lt;<arg fmt="%s" index="3">INTERFACE</arg>&gt;. This FF/Latch will be trimmed during the optimization process.
</msg>

<msg type="warning" file="Xst" num="1895" delta="old" >Due to other FF/Latch trimming, FF/Latch &lt;<arg fmt="%s" index="1">CV_INT_249</arg>&gt; (without init value) has a constant value of <arg fmt="%d" index="2">0</arg> in block &lt;<arg fmt="%s" index="3">INTERFACE</arg>&gt;. This FF/Latch will be trimmed during the optimization process.
</msg>

<msg type="warning" file="Xst" num="1895" delta="old" >Due to other FF/Latch trimming, FF/Latch &lt;<arg fmt="%s" index="1">CV_INT_253</arg>&gt; (without init value) has a constant value of <arg fmt="%d" index="2">0</arg> in block &lt;<arg fmt="%s" index="3">INTERFACE</arg>&gt;. This FF/Latch will be trimmed during the optimization process.
</msg>

<msg type="warning" file="Xst" num="1895" delta="old" >Due to other FF/Latch trimming, FF/Latch &lt;<arg fmt="%s" index="1">CV_INT_254</arg>&gt; (without init value) has a constant value of <arg fmt="%d" index="2">0</arg> in block &lt;<arg fmt="%s" index="3">INTERFACE</arg>&gt;. This FF/Latch will be trimmed during the optimization process.
</msg>

<msg type="warning" file="Xst" num="1895" delta="old" >Due to other FF/Latch trimming, FF/Latch &lt;<arg fmt="%s" index="1">CV_INT_255</arg>&gt; (without init value) has a constant value of <arg fmt="%d" index="2">0</arg> in block &lt;<arg fmt="%s" index="3">INTERFACE</arg>&gt;. This FF/Latch will be trimmed during the optimization process.
</msg>

<msg type="warning" file="Xst" num="3001" delta="old" >This design contains one or more registers or latches with an active
asynchronous set and asynchronous reset. While this circuit can be built,
it creates a sub-optimal implementation in terms of area, power and
performance. For a more optimal implementation Xilinx highly recommends
one of the following:

       1) Remove either the set or reset from all registers and latches if
          not needed for required functionality
       2) Modify the code in order to produce a synchronous set
          and/or reset (both is preferred)
       3) Use the -async_to_sync option to transform the asynchronous
          set/reset to synchronous operation
          (timing simulation highly recommended when using this option)
</msg>

<msg type="warning" file="Xst" num="1710" delta="old" >FF/Latch &lt;<arg fmt="%s" index="1">count_3</arg>&gt; (without init value) has a constant value of <arg fmt="%d" index="2">0</arg> in block &lt;<arg fmt="%s" index="3">IP_watermarking_serpent</arg>&gt;. This FF/Latch will be trimmed during the optimization process.
</msg>

<msg type="warning" file="Xst" num="1710" delta="old" >FF/Latch &lt;<arg fmt="%s" index="1">count_3</arg>&gt; (without init value) has a constant value of <arg fmt="%d" index="2">0</arg> in block &lt;<arg fmt="%s" index="3">IP_watermarking_serpent</arg>&gt;. This FF/Latch will be trimmed during the optimization process.
</msg>

<msg type="warning" file="Xst" num="1710" delta="old" >FF/Latch &lt;<arg fmt="%s" index="1">count_3</arg>&gt; (without init value) has a constant value of <arg fmt="%d" index="2">0</arg> in block &lt;<arg fmt="%s" index="3">IP_watermarking_serpent</arg>&gt;. This FF/Latch will be trimmed during the optimization process.
</msg>

<msg type="info" file="Xst" num="2261" delta="old" >The FF/Latch &lt;<arg fmt="%s" index="1">crypto_RIJNDAEL/INTER/CTRL_DATA_LOAD</arg>&gt; in Unit &lt;<arg fmt="%s" index="2">IP_watermarking_serpent</arg>&gt; is equivalent to the following <arg fmt="%s" index="3">FF/Latch</arg>, which will be removed : <arg fmt="%s" index="4">&lt;crypto_RIJNDAEL/INTER/CV_INT_127&gt; </arg>
</msg>

<msg type="info" file="Xst" num="2169" delta="old" >HDL ADVISOR - Some clock signals were not automatically buffered by XST with BUFG/BUFR resources. Please use the buffer_type constraint in order to insert these buffers to the clock signals to help prevent skew problems.
</msg>

</messages>

